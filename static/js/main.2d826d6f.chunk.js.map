{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["emailRegex","RegExp","formValid","_ref","formErrors","rest","Object","objectWithoutProperties","valid","values","forEach","val","length","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","state","console","log","concat","firstName","lastName","email","password","error","handleChange","_e$target","target","name","value","objectSpread","test","setState","defineProperty","react_default","a","createElement","className","onSubmit","noValidate","htmlFor","placeholder","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d826d6f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst emailRegex = RegExp(\n  /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n);\n\nconst formValid = ({ formErrors, ...rest }) => {\n  let valid = true;\n\n  // validate form errors being empty\n  Object.values(formErrors).forEach(val => {\n    val.length > 0 && (valid = false);\n  });\n\n  // validate the form was filled out\n  Object.values(rest).forEach(val => {\n    val === null && (valid = false);\n  });\n\n  return valid;\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      firstName: null,\n      lastName: null,\n      email: null,\n      password: null,\n      formErrors: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\"\n      }\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    if (formValid(this.state)) {\n      console.log(`\n        --SUBMITTING--\n        First Name: ${this.state.firstName}\n        Last Name: ${this.state.lastName}\n        Email: ${this.state.email}\n        Password: ${this.state.password}\n      `);\n    } else {\n      console.error(\"FORM INVALID - DISPLAY ERROR MESSAGE\");\n    }\n  };\n\n  handleChange = e => {\n    e.preventDefault();\n    const { name, value } = e.target;\n    let formErrors = { ...this.state.formErrors };\n\n    switch (name) {\n      case \"firstName\":\n        formErrors.firstName =\n          value.length < 3 ? \"minimum 3 characaters required\" : \"\";\n        break;\n      case \"lastName\":\n        formErrors.lastName =\n          value.length < 3 ? \"minimum 3 characaters required\" : \"\";\n        break;\n      case \"email\":\n        formErrors.email = emailRegex.test(value)\n          ? \"\"\n          : \"invalid email address\";\n        break;\n      case \"password\":\n        formErrors.password =\n          value.length < 6 ? \"minimum 6 characaters required\" : \"\";\n        break;\n      default:\n        break;\n    }\n\n    this.setState({ formErrors, [name]: value }, () => console.log(this.state));\n  };\n\n  render() {\n    const { formErrors } = this.state;\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"form-wrapper\">\n          <h1>Create Account</h1>\n          <form onSubmit={this.handleSubmit} noValidate>\n            <div className=\"firstName\">\n              <label htmlFor=\"firstName\">First Name</label>\n              <input\n                className={formErrors.firstName.length > 0 ? \"error\" : null}\n                placeholder=\"First Name\"\n                type=\"text\"\n                name=\"firstName\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.firstName.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.firstName}</span>\n              )}\n            </div>\n            <div className=\"lastName\">\n              <label htmlFor=\"lastName\">Last Name</label>\n              <input\n                className={formErrors.lastName.length > 0 ? \"error\" : null}\n                placeholder=\"Last Name\"\n                type=\"text\"\n                name=\"lastName\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.lastName.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.lastName}</span>\n              )}\n            </div>\n            <div className=\"email\">\n              <label htmlFor=\"email\">Email</label>\n              <input\n                className={formErrors.email.length > 0 ? \"error\" : null}\n                placeholder=\"Email\"\n                type=\"email\"\n                name=\"email\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.email.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.email}</span>\n              )}\n            </div>\n            <div className=\"password\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                className={formErrors.password.length > 0 ? \"error\" : null}\n                placeholder=\"Password\"\n                type=\"password\"\n                name=\"password\"\n                noValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.password.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.password}</span>\n              )}\n            </div>\n            <div className=\"createAccount\">\n              <button type=\"submit\">Create Account</button>\n              <small>Already Have an Account?</small>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}